# -*- coding: utf-8 -*-
"""Mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19Gr3aNRkmaq_YOReAe4-_Md9IIqATScO
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from tensorflow import keras

"""Its a built in data set in keras : https://keras.io/api/datasets/mnist/"""

(X_train,y_train),(X_test,y_test)=keras.datasets.mnist.load_data()

print("X train shape: ", X_train.shape)
print("y_train shape: " ,y_train.shape)
print("X_test shape: ", X_test.shape)
print("y_train shape: " ,y_train.shape)

"""Therefore X_train/X_test is 3d array (60000, 28, 28)"""

print("Total samples in the dataset",len(X_train))
print("Size of each sample/image",len(X_train[60000-1]))
print("shape of each sample/image",X_train[0].shape)

"""Analyzing y"""

y_train

type(y_train)

"""Therefore , y_train/y_test is just a numpy array which contains the numerical value of corresponding images in X_train/X_test

Viewing images in X
"""

# Viewing first five images
for i in range(0,6):
  plt.matshow(X_train[i])

"""Scalling training set and bring it between 0 to 1"""

X_train = X_train/255
X_test = X_test/255

X_test.shape

X_train.shape

X_train[0]

"""Present dimension is 28X28 need to convert it to 784x1/1D to feed in Neural Network

---


"""

## Flattening input data
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense

## Manual flattening using pandas
X_train_flattened=X_train.reshape(len(X_train),28*28)
X_test_flattened=X_test.reshape(len(X_test),28*28)

print(X_train.shape)
print(X_train_flattened.shape)
print(X_test.shape)
print(X_test_flattened.shape)

# Over here we are using keras builtin flatten method to flatten our data to 28*28
from tensorflow.keras.layers import Flatten

"""Designing our model"""

model = Sequential()

model.add(Flatten(input_shape=(28,28)))
model.add(Dense(128,activation='relu'))
model.add(Dense(64,activation='relu'))
model.add(Dense(32,activation='relu'))
model.add(Dense(10,activation='softmax'))

model.summary()

"""Training Model"""

model.compile(loss='sparse_categorical_crossentropy',optimizer='Adam',metrics=['accuracy'])

history = model.fit(X_train,y_train,epochs=25,validation_split=0.2)

y_output=model.predict(X_test)

print(y_output[0])
print(len(y_output[0]))
# Therefore as expected there are 10 outputs and each of them is showing a probability using softmax
# Therefore highest value outof the 10 is the prediction
print(y_output[0].argmax())

# 9.9999982e-01 is in  7th position , 7th position node is nothing but the number 7
# Note : where is it defined that &th umber bode in output layer is 7 and noth something else #

y_pred=y_output.argmax(axis=1)

from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)

history.history.keys()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])

